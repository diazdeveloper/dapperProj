<#@ template debug="false" hostspecific="true" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ assembly name="System.Xml" #>
<#@ assembly name="System.IO" #>
<#@ assembly name="System.Data" #>
<#@ assembly name="System.Configuration" #>
<#@ assembly name="Microsoft.SqlServer.ConnectionInfo" #>
<#@ assembly name="Microsoft.SqlServer.Smo" #>
<#@ assembly name="Microsoft.SqlServer.Management.Sdk.Sfc" #>

<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.IO" #>
<#@ import namespace="System.Data" #>
<#@ import namespace="System.Data.SqlClient" #>
<#@ import namespace="System.Configuration" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="Microsoft.SqlServer.Management.Smo" #>
<#@ import namespace="Microsoft.SqlServer.Management.Common" #>

<#@ output extension=".cs" #>

<#
// https://gist.github.com/anuraj/83ec6902304b749fb6eb for reference

string appConfig = this.Host.ResolvePath("../App.config");
if(!File.Exists(appConfig))
{
	Error("App.config not exists");
}

ExeConfigurationFileMap configFile = new ExeConfigurationFileMap();
configFile.ExeConfigFilename = appConfig;
var configuration = ConfigurationManager.OpenMappedExeConfiguration(configFile, ConfigurationUserLevel.None);
var connectionString = configuration.ConnectionStrings.ConnectionStrings["chinook"].ConnectionString;
SqlConnection sqlConnection = new SqlConnection(connectionString);
ServerConnection serverConnection = new ServerConnection(sqlConnection);
Server server = new Server(serverConnection);
var tables = server.Databases[server.ConnectionContext.DatabaseName].Tables;
#>

using System.ComponentModel.DataAnnotations;
using System.ComponentModel.DataAnnotations.Schema;

namespace <#= server.ConnectionContext.DatabaseName #>.Entities
{
<#
foreach(Table table in tables)
{
#>
/// <summary>
/// Class Definition for <#= FixTableName(table.Name) #>
/// </summary>
public class <#= FixTableName(table.Name) #>
{
<#
foreach(Column column in table.Columns)
{
   
#>
    
    /// <summary>
    /// <#= propertyDesc(column) #>
    /// </summary>
    <#= dataAnnotations(column) #>
	public <#= ToClrType(column.DataType, column.Nullable) #> <#= FixTableName(column.Name) #> { get; set; }
<#
}
#>
}
<#
}
#>
}
<#+ 

    
private string propertyDesc(Column column)
    {
        // Use column extended prop description provide property description
        var propDesc = column.Name;

        if (column.ExtendedProperties.Count != 0)
        {
            var listExtProp = column.ExtendedProperties["MS_Description"].Value.ToString().Split('|');
            propDesc = listExtProp[0];
        }
        
        return propDesc;
    }

private string dataAnnotations(Column column)
{
        var listAnnotations = new List<string>();
        
        //Primary Key
        if (column.InPrimaryKey)
            listAnnotations.Add("[Key]");

        //Required
        if (!column.Nullable)
            listAnnotations.Add("[Required(ErrorMessage = \"" + column.Name + " is required\" )]");

        //Length (strings only)
        var isString = false;
        switch (column.DataType.SqlDataType)
        {
            case SqlDataType.Char:
            case SqlDataType.NChar:
            case SqlDataType.NText:
            case SqlDataType.NVarChar:
            case SqlDataType.Text:
            case SqlDataType.VarChar:
            case SqlDataType.Xml:
                isString = true;
                break;
            default:
                isString = false;
                break;

        }

        if(isString)
            listAnnotations.Add("[StringLength(" + column.DataType.MaximumLength + ", ErrorMessage = \"" +  column.Name + " has a maximum of " + column.DataType.MaximumLength + " characters\")]");

        //Data Type //Need to read upon this

        //Column
        listAnnotations.Add("[Column(TypeName =\"" + column.DataType.SqlDataType.ToString() + "\")]");

        //Display
        var displayName = "TBA";
        var displayPrompt = "Please enter (TBA)";
        var displayDesc= "TBA";

        var extProperties = "working on it";

        if (column.ExtendedProperties.Count != 0)
        {
            var listExtProp = column.ExtendedProperties["MS_Description"].Value.ToString().Split('|');
            displayName = listExtProp[0];
            displayPrompt = listExtProp[1];
            displayDesc = listExtProp[2];
        }

        //var name = column.Name;
        //var listColDescription = myExtProp.ID;  //.ToList;
        //if (extProperties != null)
        listAnnotations.Add(" [Display(Name = \"" + displayName + "\", Prompt = \"" + displayPrompt+ "\", Description= \"" + displayDesc + "\")]");
        
        var returnString = String.Join("\n", listAnnotations);
        return returnString;
}

private string FixTableName(string tableName)
{
	var result = tableName.Replace(" ","_");
	return System.Globalization.CultureInfo.CurrentCulture.TextInfo.ToTitleCase(result);
}

private string ToClrType(DataType dataType, bool isNullable)
{
	string returnType = string.Empty;
	switch (dataType.SqlDataType)
    {
        case SqlDataType.BigInt:
            returnType = string.Format("{0}{1}","long", isNullable ? "?":"");
			break;
        case SqlDataType.Binary:
        case SqlDataType.Image:
        case SqlDataType.Timestamp:
        case SqlDataType.VarBinary:
            returnType = "byte[]";
			break;
        case SqlDataType.Bit:
			returnType = string.Format("{0}{1}","bool", isNullable ? "?":"");
			break;
        case SqlDataType.Char:
        case SqlDataType.NChar:
        case SqlDataType.NText:
        case SqlDataType.NVarChar:
        case SqlDataType.Text:
        case SqlDataType.VarChar:
        case SqlDataType.Xml:
            returnType = string.Format("{0}{1}","string", "");
			break;
        case SqlDataType.DateTime:
        case SqlDataType.SmallDateTime:
        case SqlDataType.Date:
        case SqlDataType.Time:
        case SqlDataType.DateTime2:
			returnType = string.Format("{0}{1}","System.DateTime", isNullable ? "?":"");
			break;
        case SqlDataType.Decimal:
        case SqlDataType.Money:
        case SqlDataType.SmallMoney:
        case SqlDataType.Numeric:
			returnType = string.Format("{0}{1}","decimal", isNullable ? "?":"");
			break;
        case SqlDataType.Float:
			returnType = string.Format("{0}{1}","double", isNullable ? "?":"");
			break;
        case SqlDataType.Int:
			returnType = string.Format("{0}{1}","int", isNullable ? "?":"");
			break;
        case SqlDataType.Real:
			returnType = string.Format("{0}{1}","float", isNullable ? "?":"");
			break;
        case SqlDataType.UniqueIdentifier:
			returnType = string.Format("{0}{1}","Guid", isNullable ? "?":"");
			break;
        case SqlDataType.SmallInt:
            returnType = string.Format("{0}{1}","short", isNullable ? "?":"");
			break;
        case SqlDataType.TinyInt:
            returnType = string.Format("{0}{1}","byte", isNullable ? "?":"");
			break;
        case SqlDataType.Variant:
            returnType = string.Format("{0}{1}","object", "");
			break;
        case SqlDataType.DateTimeOffset:
            returnType = string.Format("{0}{1}","DateTimeOffset", isNullable ? "?":"");
			break;
		}

		return returnType;
}

#>